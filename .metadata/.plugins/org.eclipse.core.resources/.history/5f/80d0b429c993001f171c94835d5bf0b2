package actionservlet;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.sql.*;
import java.util.*;
import java.util.List;

import javax.activation.DataHandler;
import javax.mail.*;
import javax.mail.internet.*;
import javax.mail.util.ByteArrayDataSource;
import com.itextpdf.text.*;
import com.itextpdf.text.html.simpleparser.HTMLWorker;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.tool.xml.XMLWorkerHelper;
import adminservlet.Question;
import java.io.ByteArrayOutputStream;

@SuppressWarnings("deprecation")
public class QuizServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;
    private static final String DB_URL = "jdbc:mysql://localhost:3306/easyleran";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "";
    private static final long QUIZ_DURATION = 150L; // 150 seconds

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        HttpSession session = request.getSession(false);

        if (session == null || session.getAttribute("userName") == null) {
            response.sendRedirect("loginuser.jsp");
            return;
        }

        String courseName = (String) session.getAttribute("courseName");
        String userName = (String) session.getAttribute("userName");
        String userEmail = (String) session.getAttribute("email");
        Integer userId = (Integer) session.getAttribute("userId");

        if (courseName == null || courseName.trim().isEmpty()) {
            response.sendRedirect("quizinstruct.jsp");
            return;
        }

        List<Question> questions = (List<Question>) session.getAttribute("questions");
        Integer currentQuestionIndex = (Integer) session.getAttribute("currentQuestionIndex");

        if (questions == null) {
            questions = getQuestionsForCourse(courseName);

            if (questions == null || questions.isEmpty()) {
                request.setAttribute("errorMessage", "Currently, there are no questions available for this course.");
                request.getRequestDispatcher("errorPage.jsp").forward(request, response);
                return;
            }

            session.setAttribute("quizStartTime", System.currentTimeMillis());
            session.setAttribute("questions", questions);
            currentQuestionIndex = 0;
            session.setAttribute("currentQuestionIndex", currentQuestionIndex);
            session.setAttribute("score", 0);
            session.setAttribute("lifelineFiftyFiftyUsed", false);
            session.setAttribute("lifelineShowAnswerUsed", false);
        } else {
            String selectedAnswer = request.getParameter("answer");
            if (selectedAnswer != null) {
                List<String> userAnswers = (List<String>) session.getAttribute("userAnswers");
                if (userAnswers == null) {
                    userAnswers = new ArrayList<>();
                    session.setAttribute("userAnswers", userAnswers);
                }

                while (userAnswers.size() <= currentQuestionIndex) {
                    userAnswers.add(null);
                }

                userAnswers.set(currentQuestionIndex, selectedAnswer);

                Question currentQuestion = questions.get(currentQuestionIndex);
                String correctAnswer = currentQuestion.getCorrectAnswer();
                Integer score = (Integer) session.getAttribute("score");

                if (score == null) {
                    score = 0;
                }

                if (selectedAnswer.equals(correctAnswer)) {
                    score += 10;
                }

                session.setAttribute("score", score);
            }

            currentQuestionIndex++;
            if (currentQuestionIndex >= questions.size()) {
                Integer finalScore = (Integer) session.getAttribute("score");
                boolean emailSent = false;

                if (finalScore != null && finalScore > 70) {
                    emailSent = sendCertificateEmail(request, response, userEmail, userName, courseName, finalScore, userId);

                    if (emailSent) {
                        session.setAttribute("alertMessage", "Your course certificate is mailed to you.");
                    } else {
                        session.setAttribute("alertMessage", "Failed to send the email.");
                    }
                } else {
                    session.setAttribute("alertMessage", "You have failed the quiz. Please try again.");
                }

                response.sendRedirect("quizCompletion.jsp");
                return;
            }

            session.setAttribute("currentQuestionIndex", currentQuestionIndex);
        }

        Long quizStartTime = (Long) session.getAttribute("quizStartTime");
        if (quizStartTime == null) {
            quizStartTime = System.currentTimeMillis();
            session.setAttribute("quizStartTime", quizStartTime);
        }

        long elapsedTime = (System.currentTimeMillis() - quizStartTime) / 1000;
        long timeRemaining = QUIZ_DURATION - elapsedTime;

        if (timeRemaining <= 0) {
            response.sendRedirect("quizCompletion.jsp");
            return;
        }

        request.setAttribute("timeRemaining", timeRemaining);
        request.getRequestDispatcher("quizPage.jsp").forward(request, response);
    }

    private List<Question> getQuestionsForCourse(String courseName) {
        List<Question> questions = new ArrayList<>();

        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement ps = connection.prepareStatement("SELECT question_text, option_a AS optionA, option_b AS optionB, "
                     + "option_c AS optionC, option_d AS optionD, correct_answer AS correctAnswer "
                     + "FROM questions WHERE course_id = (SELECT course_id FROM courses WHERE course_name = ?) ORDER BY RAND() LIMIT 15")) {

            ps.setString(1, courseName);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                Question question = new Question();
                question.setQuestionText(rs.getString("question_text"));
                question.setOptionA(rs.getString("optionA"));
                question.setOptionB(rs.getString("optionB"));
                question.setOptionC(rs.getString("optionC"));
                question.setOptionD(rs.getString("optionD"));
                question.setCorrectAnswer(rs.getString("correctAnswer"));
                questions.add(question);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return questions;
    }

    private Integer getCourseId(String courseName) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement ps = connection.prepareStatement("SELECT course_id FROM courses WHERE course_name = ?")) {
            ps.setString(1, courseName);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                return rs.getInt("course_id");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    private void storeCertificateData(Integer userId, Integer courseId, Integer score) {
        // Debugging statement to check for null values
        System.out.println("Debug Info - userId: " + userId + ", courseId: " + courseId + ", score: " + score);

        if (userId == null || courseId == null || score == null) {
            System.out.println("Invalid input: userId, courseId, or score is null.");
            return;
        }

        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement ps = connection.prepareStatement("INSERT INTO certificates (user_id, course_id, score, issue_date) VALUES (?, ?, ?, ?)")) {

            ps.setInt(1, userId);
            ps.setInt(2, courseId);
            ps.setInt(3, score);
            ps.setDate(4, new java.sql.Date(System.currentTimeMillis()));

            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doPost(request, response);
    }

    private String renderCertificateHtml(HttpServletRequest request, HttpServletResponse response, String userName, String courseName, int score) throws ServletException, IOException {
        request.setAttribute("userName", userName);
        request.setAttribute("courseName", courseName);
        request.setAttribute("score", score);

        StringWriter stringWriter = new StringWriter();
        PrintWriter writer = new PrintWriter(stringWriter);

        RequestDispatcher dispatcher = request.getRequestDispatcher("certificate.jsp");
        HttpServletResponseWrapper wrappedResponse = new HttpServletResponseWrapper(response) {
            @Override
            public PrintWriter getWriter() {
                return writer;
            }
        };
        dispatcher.include(request, wrappedResponse);

        String renderedHtml = stringWriter.toString();
        System.out.println("Rendered HTML: " + renderedHtml); // Debug line

        return renderedHtml;
    }

    private boolean sendCertificateEmail(HttpServletRequest request, HttpServletResponse response, String toEmail, String userName, String courseName, int score, Integer userId)
            throws IOException, ServletException {

        try {
            String fromEmail = "projecteasylearn1@gmail.com";
            String fromPassword = "ujgd tnxt nrsj rfbq"; // Make sure to keep sensitive information secure

            // Render the certificate HTML
            String certificateHtml = renderCertificateHtml(request, response, userName, courseName, score);
            ByteArrayOutputStream pdfOut = generatePdfFromHtml(certificateHtml, request);
            
            // Get the course ID
            Integer courseId = getCourseId(courseName);
            if (courseId == null) {
                System.out.println("Failed to find courseId for courseName: " + courseName);
                return false;
            }

            // Store certificate data in database
            storeCertificateData(userId, courseId, score);

            // Setup email
            Properties props = new Properties();
            props.put("mail.smtp.host", "smtp.gmail.com");
            props.put("mail.smtp.port", "587");
            props.put("mail.smtp.auth", "true");
            props.put("mail.smtp.starttls.enable", "true");

            Session session = Session.getInstance(props, new javax.mail.Authenticator() {
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(fromEmail, fromPassword);
                }
            });

            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(fromEmail));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail));
            message.setSubject("Course Certificate");

            // Attach PDF certificate
            MimeBodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart.setText("Congratulations! Here is your course completion certificate.");
            MimeBodyPart attachmentPart = new MimeBodyPart();
            attachmentPart.setDataHandler(new DataHandler(new ByteArrayDataSource(pdfOut.toByteArray(), "application/pdf")));
            attachmentPart.setFileName("certificate.pdf");

            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(messageBodyPart);
            multipart.addBodyPart(attachmentPart);

            message.setContent(multipart);

            Transport.send(message);
            return true;

        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    private ByteArrayOutputStream generatePdfFromHtml(String certificateHtml, HttpServletRequest request) throws IOException {
        ByteArrayOutputStream pdfOut = new ByteArrayOutputStream();

        try {
            Document document = new Document();
            PdfWriter writer = PdfWriter.getInstance(document, pdfOut);
            document.open();
            XMLWorkerHelper.getInstance().parseXHtml(writer, document, new StringReader(certificateHtml));
            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return pdfOut;
    }
}
