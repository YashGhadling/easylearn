package actionservlet;
import javax.activation.DataSource;
import jakarta.servlet.*;
import jakarta.servlet.http.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.sql.*;
import java.util.*;
import java.util.List;

import javax.activation.DataHandler;
import javax.mail.*;
import javax.mail.internet.*;
import javax.mail.util.ByteArrayDataSource;

import com.itextpdf.html2pdf.HtmlConverter;
import com.itextpdf.text.*;
import com.itextpdf.text.html.simpleparser.HTMLWorker;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.tool.xml.XMLWorkerHelper;
import adminservlet.Question;
import java.io.ByteArrayOutputStream;

@SuppressWarnings({ "deprecation", "unused" })
public class QuizServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;
    private static final String DB_URL = "jdbc:mysql://localhost:3306/easyleran";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "";
    private static final long QUIZ_DURATION = 150L; // 150 seconds

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
    	 HttpSession session = request.getSession();
         String action = request.getParameter("action");

         if ("useFiftyFifty".equals(action)) {
             session.setAttribute("lifelineFiftyFiftyUsed", true);
         } else if ("useShowAnswer".equals(action)) {
             session.setAttribute("lifelineShowAnswerUsed", true);
         }
        HttpSession sessi = request.getSession(false);

        if (session == null || session.getAttribute("userName") == null) {
            response.sendRedirect("loginuser.jsp");
            return;
        }

        String courseName = (String) session.getAttribute("courseName");
        String userName = (String) session.getAttribute("userName");
        String userEmail = (String) session.getAttribute("email");
        Integer userId = (Integer) session.getAttribute("userId");

        // Fetch userId from the database if it's missing in the session
        if (userId == null) {
            userId = getUserIdFromDatabase(userName);
            if (userId == null) {
                System.out.println("Failed to retrieve userId for userName: " + userName);
                response.sendRedirect("loginuser.jsp");
                return;
            }
            session.setAttribute("userId", userId);
        }

        if (courseName == null || courseName.trim().isEmpty()) {
            response.sendRedirect("quizinstruct.jsp");
            return;
        }

        List<Question> questions = (List<Question>) session.getAttribute("questions");
        Integer currentQuestionIndex = (Integer) session.getAttribute("currentQuestionIndex");

        if (questions == null) {
            questions = getQuestionsForCourse(courseName);

            if (questions == null || questions.isEmpty()) {
                request.setAttribute("errorMessage", "Currently, there are no questions available for this course.");
                request.getRequestDispatcher("errorPage.jsp").forward(request, response);
                return;
            }

            session.setAttribute("quizStartTime", System.currentTimeMillis());
            session.setAttribute("questions", questions);
            currentQuestionIndex = 0;
            session.setAttribute("currentQuestionIndex", currentQuestionIndex);
            session.setAttribute("score", 0);
            session.setAttribute("lifelineFiftyFiftyUsed", false);
            session.setAttribute("lifelineShowAnswerUsed", false);
        } else {
            String selectedAnswer = request.getParameter("answer");
            if (selectedAnswer != null) {
                List<String> userAnswers = (List<String>) session.getAttribute("userAnswers");
                if (userAnswers == null) {
                    userAnswers = new ArrayList<>();
                    session.setAttribute("userAnswers", userAnswers);
                }

                while (userAnswers.size() <= currentQuestionIndex) {
                    userAnswers.add(null);
                }

                userAnswers.set(currentQuestionIndex, selectedAnswer);

                Question currentQuestion = questions.get(currentQuestionIndex);
                String correctAnswer = currentQuestion.getCorrectAnswer();
                Integer score = (Integer) session.getAttribute("score");

                if (score == null) {
                    score = 0;
                }

                if (selectedAnswer.equals(correctAnswer)) {
                    score += 10;
                }

                session.setAttribute("score", score);
            }

            currentQuestionIndex++;
            if (currentQuestionIndex >= questions.size()) {
                Integer finalScore = (Integer) session.getAttribute("score");
                boolean emailSent = false;

                if (finalScore != null && finalScore > 70) {
                    emailSent = sendCertificateEmail(request, response, userEmail, userName, courseName, finalScore, userId);

                    if (emailSent) {
                        session.setAttribute("alertMessage", "Your course certificate is mailed to you.");
                    } else {
                        session.setAttribute("alertMessage", "Failed to send the email.");
                    }
                } else {
                    session.setAttribute("alertMessage", "You have failed the quiz. Please try again.");
                }

                response.sendRedirect("quizCompletion.jsp");
                return;
            }

            session.setAttribute("currentQuestionIndex", currentQuestionIndex);
        }

        Long quizStartTime = (Long) session.getAttribute("quizStartTime");
        if (quizStartTime == null) {
            quizStartTime = System.currentTimeMillis();
            session.setAttribute("quizStartTime", quizStartTime);
        }

        long elapsedTime = (System.currentTimeMillis() - quizStartTime) / 1000;
        long timeRemaining = QUIZ_DURATION - elapsedTime;

        if (timeRemaining <= 0) {
            response.sendRedirect("quizCompletion.jsp");
            return;
        }

        request.setAttribute("timeRemaining", timeRemaining);
        request.getRequestDispatcher("quizPage.jsp").forward(request, response);
    }

    private boolean sendCertificateEmail(HttpServletRequest request, HttpServletResponse response, String userEmail,
			String userName, String courseName, Integer finalScore, Integer userId) {
		// TODO Auto-generated method stub
		return false;
	}

	private Integer getUserIdFromDatabase(String userName) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement ps = connection.prepareStatement("SELECT uid FROM users WHERE uname = ?")) { // Update the query here to match your table structure
            ps.setString(1, userName);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                return rs.getInt("uid"); // Use the correct column name for user ID
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    private List<Question> getQuestionsForCourse(String courseName) {
        List<Question> questions = new ArrayList<>();

        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement ps = connection.prepareStatement("SELECT question_text, option_a AS optionA, option_b AS optionB, "
                     + "option_c AS optionC, option_d AS optionD, correct_answer AS correctAnswer "
                     + "FROM questions WHERE course_id = (SELECT course_id FROM courses WHERE course_name = ?) ORDER BY RAND() LIMIT 15")) {

            ps.setString(1, courseName);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                Question question = new Question();
                question.setQuestionText(rs.getString("question_text"));
                question.setOptionA(rs.getString("optionA"));
                question.setOptionB(rs.getString("optionB"));
                question.setOptionC(rs.getString("optionC"));
                question.setOptionD(rs.getString("optionD"));
                question.setCorrectAnswer(rs.getString("correctAnswer"));
                questions.add(question);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return questions;
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doPost(request, response);
    }
}