/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.27
 * Generated at: 2024-11-03 15:34:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import adminservlet.Question;

public final class quizPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("adminservlet.Question");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

    HttpSession sesion = request.getSession(false);

    if (session == null || session.getAttribute("userName") == null || session.getAttribute("courseName") == null || session.getAttribute("questions") == null) {
        response.sendRedirect("loginuser.jsp");
        return;
    }

    String userName = (String) session.getAttribute("userName");
    String courseName = (String) session.getAttribute("courseName");
    List<Question> questions = (List<Question>) session.getAttribute("questions");
    Integer currentQuestionIndex = (Integer) session.getAttribute("currentQuestionIndex");
    Long quizStartTime = (Long) session.getAttribute("quizStartTime");
    Integer timeRemaining = (Integer) session.getAttribute("QUIZ_DURATION");

    if (currentQuestionIndex == null || currentQuestionIndex >= questions.size()) {
        response.sendRedirect("errorPage.jsp");
        return;
    }

    if (timeRemaining == null) {
        timeRemaining = 150;
    }

    if (quizStartTime != null) {
        long elapsedTime = (System.currentTimeMillis() - quizStartTime) / 1000;
        timeRemaining = Math.max(0, timeRemaining - (int) elapsedTime);
    }

    if (session.getAttribute("lifelineFiftyFiftyUsed") == null) {
        session.setAttribute("lifelineFiftyFiftyUsed", false);
    }
    if (session.getAttribute("lifelineShowAnswerUsed") == null) {
        session.setAttribute("lifelineShowAnswerUsed", false);
    }

    boolean lifelineFiftyFiftyUsed = Boolean.TRUE.equals(session.getAttribute("lifelineFiftyFiftyUsed"));
    boolean lifelineShowAnswerUsed = Boolean.TRUE.equals(session.getAttribute("lifelineShowAnswerUsed"));

    Question currentQuestion = questions.get(currentQuestionIndex);
    String previousAnswer = null;
    List<String> userAnswers = (List<String>) session.getAttribute("userAnswers");
    if (userAnswers != null && currentQuestionIndex < userAnswers.size()) {
        previousAnswer = userAnswers.get(currentQuestionIndex);
    }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Quiz</title>\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("    <style>\r\n");
      out.write("         body {\r\n");
      out.write("            font-family: 'Poppins', sans-serif;\r\n");
      out.write("            background-color: #2c2e43;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            height: 100vh;\r\n");
      out.write("        }\r\n");
      out.write("        .container {\r\n");
      out.write("            background-color: #3b3e5b;\r\n");
      out.write("            border-radius: 12px;\r\n");
      out.write("            padding: 40px;\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            max-width: 600px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.3);\r\n");
      out.write("        }\r\n");
      out.write("        h2 {\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            font-size: 26px;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        .question {\r\n");
      out.write("            font-size: 22px;\r\n");
      out.write("            color: #f9f9f9;\r\n");
      out.write("            margin-bottom: 30px;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border: 2px solid #f39c12;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            background: linear-gradient(90deg, rgba(243,156,18,1) 0%, rgba(192,57,43,1) 100%);\r\n");
      out.write("        }\r\n");
      out.write("        .options {\r\n");
      out.write("            margin: 20px 0;\r\n");
      out.write("        }\r\n");
      out.write("        .option {\r\n");
      out.write("            background-color: #576574;\r\n");
      out.write("            color: white;\r\n");
      out.write("            font-size: 18px;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            margin: 10px 0;\r\n");
      out.write("            display: block;\r\n");
      out.write("            transition: all 0.3s;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            border: none;\r\n");
      out.write("            width: 100%;\r\n");
      out.write("        }\r\n");
      out.write("        .option:hover {\r\n");
      out.write("            background-color: #f39c12;\r\n");
      out.write("        }\r\n");
      out.write("        .lifeline {\r\n");
      out.write("            background-color: #22a6b3;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            border: none;\r\n");
      out.write("            padding: 10px 20px;\r\n");
      out.write("            border-radius: 30px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            margin: 5px;\r\n");
      out.write("            transition: background-color 0.3s ease;\r\n");
      out.write("        }\r\n");
      out.write("        .lifeline:hover {\r\n");
      out.write("            background-color: #0984e3;\r\n");
      out.write("        }\r\n");
      out.write("        .timer {\r\n");
      out.write("            font-size: 20px;\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            color: #ff7675;\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        .button {\r\n");
      out.write("            background-color: #f39c12;\r\n");
      out.write("            color: white;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 30px;\r\n");
      out.write("            padding: 12px 25px;\r\n");
      out.write("            font-size: 18px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("            transition: background-color 0.3s ease;\r\n");
      out.write("        }\r\n");
      out.write("        .button:hover {\r\n");
      out.write("            background-color: #e67e22;\r\n");
      out.write("        } /* Add CSS styling */\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <h2>Question ");
      out.print( currentQuestionIndex + 1 );
      out.write(" of ");
      out.print( questions.size() );
      out.write("</h2>\r\n");
      out.write("        <div class=\"question\">\r\n");
      out.write("            ");
      out.print( currentQuestion.getQuestionText() );
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("        <form id=\"quizForm\" action=\"QuizServlet\" method=\"post\">\r\n");
      out.write("            <div class=\"options\">\r\n");
      out.write("                <button class=\"option\" id=\"optionA\" type=\"radio\" name=\"answer\" value=\"A\" ");
      out.print( previousAnswer != null && previousAnswer.equals("A") ? "checked" : "" );
      out.write("> \r\n");
      out.write("                    A. ");
      out.print( currentQuestion.getOptionA() );
      out.write("\r\n");
      out.write("                </button>\r\n");
      out.write("                <button class=\"option\" id=\"optionB\" type=\"radio\" name=\"answer\" value=\"B\" ");
      out.print( previousAnswer != null && previousAnswer.equals("B") ? "checked" : "" );
      out.write("> \r\n");
      out.write("                    B. ");
      out.print( currentQuestion.getOptionB() );
      out.write("\r\n");
      out.write("                </button>\r\n");
      out.write("                <button class=\"option\" id=\"optionC\" type=\"radio\" name=\"answer\" value=\"C\" ");
      out.print( previousAnswer != null && previousAnswer.equals("C") ? "checked" : "" );
      out.write("> \r\n");
      out.write("                    C. ");
      out.print( currentQuestion.getOptionC() );
      out.write("\r\n");
      out.write("                </button>\r\n");
      out.write("                <button class=\"option\" id=\"optionD\" type=\"radio\" name=\"answer\" value=\"D\" ");
      out.print( previousAnswer != null && previousAnswer.equals("D") ? "checked" : "" );
      out.write("> \r\n");
      out.write("                    D. ");
      out.print( currentQuestion.getOptionD() );
      out.write("\r\n");
      out.write("                </button>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <input type=\"hidden\" name=\"questionIndex\" value=\"");
      out.print( currentQuestionIndex );
      out.write("\">\r\n");
      out.write("            <input type=\"hidden\" name=\"courseName\" value=\"");
      out.print( courseName );
      out.write("\">\r\n");
      out.write("        </form>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"timer\">\r\n");
      out.write("            Time Remaining: <span id=\"timer\">");
      out.print( timeRemaining );
      out.write("</span> seconds\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <button class=\"lifeline\" id=\"lifelineFiftyFifty\" onclick=\"useFiftyFifty()\" ");
      out.print( lifelineFiftyFiftyUsed ? "disabled" : "" );
      out.write(">50-50</button>\r\n");
      out.write("        <button class=\"lifeline\" id=\"lifelineShowAnswer\" onclick=\"useShowAnswer()\" ");
      out.print( lifelineShowAnswerUsed ? "disabled" : "" );
      out.write(">Show Answer</button>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        var timeRemaining = ");
      out.print( timeRemaining );
      out.write(";\r\n");
      out.write("        var correctAnswer = '");
      out.print( currentQuestion.getCorrectAnswer() );
      out.write("';\r\n");
      out.write("        var lifelineFiftyFiftyUsed = ");
      out.print( lifelineFiftyFiftyUsed ? "true" : "false" );
      out.write(";\r\n");
      out.write("        var lifelineShowAnswerUsed = ");
      out.print( lifelineShowAnswerUsed ? "true" : "false" );
      out.write(";\r\n");
      out.write("\r\n");
      out.write("        function startTimer() {\r\n");
      out.write("            var timerInterval = setInterval(function() {\r\n");
      out.write("                timeRemaining--;\r\n");
      out.write("                document.getElementById(\"timer\").innerText = timeRemaining;\r\n");
      out.write("                if (timeRemaining <= 0) {\r\n");
      out.write("                    clearInterval(timerInterval);\r\n");
      out.write("                    alert(\"Time's up!\");\r\n");
      out.write("                    document.getElementById(\"quizForm\").submit();\r\n");
      out.write("                }\r\n");
      out.write("            }, 1000);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function useFiftyFifty() {\r\n");
      out.write("            if (lifelineFiftyFiftyUsed === \"true\") {\r\n");
      out.write("                alert(\"50-50 lifeline already used.\");\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            lifelineFiftyFiftyUsed = \"true\";\r\n");
      out.write("            document.getElementById(\"lifelineFiftyFifty\").disabled = true;\r\n");
      out.write("\r\n");
      out.write("            var incorrectOptions = [\"A\", \"B\", \"C\", \"D\"].filter(opt => opt !== correctAnswer);\r\n");
      out.write("            incorrectOptions.splice(0, 2).forEach(opt => {\r\n");
      out.write("                document.getElementById(\"option\" + opt).style.display = \"none\";\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            fetch('QuizServlet', {\r\n");
      out.write("                method: 'POST',\r\n");
      out.write("                body: new URLSearchParams({ action: 'useFiftyFifty' })\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function useShowAnswer() {\r\n");
      out.write("            if (lifelineShowAnswerUsed === \"true\") {\r\n");
      out.write("                alert(\"Show Answer lifeline already used.\");\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            lifelineShowAnswerUsed = \"true\";\r\n");
      out.write("            document.getElementById(\"lifelineShowAnswer\").disabled = true;\r\n");
      out.write("            alert(\"The correct answer is: \" + correctAnswer);\r\n");
      out.write("\r\n");
      out.write("            fetch('QuizServlet', {\r\n");
      out.write("                method: 'POST',\r\n");
      out.write("                body: new URLSearchParams({ action: 'useShowAnswer' })\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        startTimer();\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
