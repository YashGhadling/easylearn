/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.27
 * Generated at: 2024-09-29 05:49:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import java.sql.Date;

public final class leaderboard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Date");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    String dbURL = "jdbc:mysql://localhost:3306/easyleran";
    String dbUser = "root";
    String dbPass = "";
    Connection conn = null;
    PreparedStatement psLeaderboard = null;
    PreparedStatement psCourses = null;
    ResultSet rsLeaderboard = null;
    ResultSet rsCourses = null;
    String selectedCourseId = request.getParameter("courseId");
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        conn = DriverManager.getConnection(dbURL, dbUser, dbPass);
        String sqlLeaderboard = "SELECT u.uname AS username, c.course_name, qr.score, qr.quiz_date " +
                                "FROM quiz_results qr " +
                                "JOIN users u ON qr.user_id = u.uid " +
                                "JOIN courses c ON qr.course_id = c.course_id " +
                                "WHERE qr.course_id = ? " +
                                "ORDER BY qr.score DESC";
        psLeaderboard = conn.prepareStatement(sqlLeaderboard);
        if (selectedCourseId != null && !selectedCourseId.isEmpty()) {
            psLeaderboard.setString(1, selectedCourseId);
        } else {
            psLeaderboard.setString(1, "0");
        }
        
        rsLeaderboard = psLeaderboard.executeQuery();
        String sqlCourses = "SELECT course_id, course_name FROM courses";
        psCourses = conn.prepareStatement(sqlCourses);
        rsCourses = psCourses.executeQuery();

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Leaderboard</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        table {\r\n");
      out.write("            width: 60%;\r\n");
      out.write("            margin: 20px auto;\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("        }\r\n");
      out.write("        table, th, td {\r\n");
      out.write("            border: 1px solid black;\r\n");
      out.write("        }\r\n");
      out.write("        th, td {\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("        th {\r\n");
      out.write("            background-color: #f2f2f2;\r\n");
      out.write("        }\r\n");
      out.write("        .form-container {\r\n");
      out.write("            width: 60%;\r\n");
      out.write("            margin: 20px auto;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("        .form-select {\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            width: 200px;\r\n");
      out.write("            background-color: #f9f9f9;\r\n");
      out.write("        }\r\n");
      out.write("        .button-back {\r\n");
      out.write("            display: inline-block;\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("            padding: 10px 20px;\r\n");
      out.write("            background-color: #4CAF50;\r\n");
      out.write("            color: white;\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("        }\r\n");
      out.write("        .button-back:hover {\r\n");
      out.write("            background-color: #45a049;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"form-container\">\r\n");
      out.write("        <form action=\"leaderboard.jsp\" method=\"get\">\r\n");
      out.write("            <label for=\"courseId\" class=\"form-label\">Select Course:</label>\r\n");
      out.write("            <select name=\"courseId\" id=\"courseId\" class=\"form-select\" onchange=\"this.form.submit()\">\r\n");
      out.write("                <option value=\"\" disabled selected>Select a course</option>\r\n");
      out.write("                ");

                    while (rsCourses.next()) {
                        String courseId = rsCourses.getString("course_id");
                        String courseName = rsCourses.getString("course_name");
                
      out.write("\r\n");
      out.write("                <option value=\"");
      out.print( courseId );
      out.write('"');
      out.write(' ');
      out.print( (courseId.equals(selectedCourseId) ? "selected" : "") );
      out.write('>');
      out.print( courseName );
      out.write("</option>\r\n");
      out.write("                ");

                    }
                
      out.write("\r\n");
      out.write("            </select>\r\n");
      out.write("        </form>\r\n");
      out.write("\r\n");
      out.write("        <!-- Back Button Styled as a Button -->\r\n");
      out.write("        <a href=\"index.jsp\" class=\"button-back\">Back to Home</a>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <h1 style=\"text-align: center;\">Leaderboard</h1>\r\n");
      out.write("\r\n");
      out.write("    <table>\r\n");
      out.write("        <thead>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th> Username </th>\r\n");
      out.write("                <th> Course </th>\r\n");
      out.write("                <th> Score </th>\r\n");
      out.write("                <th> Quiz Date </th>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </thead>\r\n");
      out.write("        <tbody>\r\n");
      out.write("            ");
 
                while (rsLeaderboard.next()) {
                    String username = rsLeaderboard.getString("username");
                    String courseName = rsLeaderboard.getString("course_name");
                    int score = rsLeaderboard.getInt("score");
                    java.sql.Date quizDate = rsLeaderboard.getDate("quiz_date");
            
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>");
      out.print( username );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( courseName );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( score );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( quizDate );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");

                }
            
      out.write("\r\n");
      out.write("        </tbody>\r\n");
      out.write("    </table>\r\n");
      out.write("\r\n");

    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        try {
            if (rsLeaderboard != null) rsLeaderboard.close();
            if (rsCourses != null) rsCourses.close();
            if (psLeaderboard != null) psLeaderboard.close();
            if (psCourses != null) psCourses.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
